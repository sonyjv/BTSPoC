// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.apache.spark.bts.deal.entity

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[org.apache.spark.bts.deal.entity.Foo](node)
val document = scalaxb.toXML[org.apache.spark.bts.deal.entity.Foo](obj, "foo", org.apache.spark.bts.deal.entity.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://schemas.cs.csg.com/ifg001908_bts/v1",
    Some("ifg001908_bts_1") -> "http://schemas.cs.csg.com/ifg001908_bts/v1",
    Some("receiveBTDeal_2_0") -> "http://services.cs.csg.com/IFG001908_BTS/receiveBTDeal_2_0",
    Some("v10") -> "http://schemas.cs.csg.com/pb/bas/gedd/de/v1",
    Some("v1") -> "http://schemas.cs.csg.com/pb/bas/gedd/il/v1",
    Some("v1_1") -> "http://schemas.cs.csg.com/pb/bas/gedd/ti/v1",
    Some("v2") -> "http://schemas.cs.csg.com/ifg001908_bts/v2",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val EntityTransactionTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionType] = new DefaultEntityTransactionTypeFormat {}
  implicit lazy val EntityTransactionReversalFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionReversal] = new DefaultEntityTransactionReversalFormat {}
  implicit lazy val EntityDealReferenceTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealReferenceType] = new DefaultEntityDealReferenceTypeFormat {}
  implicit lazy val EntityTransactionDetailTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionDetailType] = new DefaultEntityTransactionDetailTypeFormat {}
  implicit lazy val EntityDetailAttributeTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DetailAttributeType] = new DefaultEntityDetailAttributeTypeFormat {}
  implicit lazy val EntityAttributeTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.AttributeType] = new DefaultEntityAttributeTypeFormat {}
  implicit lazy val EntityAttributeValueTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.AttributeValueType] = new DefaultEntityAttributeValueTypeFormat {}
  implicit lazy val EntityDetailSubEntityTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DetailSubEntityType] = new DefaultEntityDetailSubEntityTypeFormat {}
  implicit lazy val EntityExceptionFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Exception] = new DefaultEntityExceptionFormat {}
  implicit lazy val EntityTrxReversalFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TrxReversal] = new DefaultEntityTrxReversalFormat {}
  implicit lazy val EntityHeaderFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Header] = new DefaultEntityHeaderFormat {}
  implicit lazy val EntityTransactionLinkFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionLink] = new DefaultEntityTransactionLinkFormat {}
  implicit lazy val EntityDealReversalFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealReversal] = new DefaultEntityDealReversalFormat {}
  implicit lazy val EntityAttentionFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Attention] = new DefaultEntityAttentionFormat {}
  implicit lazy val EntityDealTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealType] = new DefaultEntityDealTypeFormat {}
  implicit lazy val EntityDealContextTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealContextType] = new DefaultEntityDealContextTypeFormat {}
  implicit lazy val EntityDealLinkTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealLinkType] = new DefaultEntityDealLinkTypeFormat {}
  implicit lazy val EntityDealDetailTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealDetailType] = new DefaultEntityDealDetailTypeFormat {}
  implicit lazy val EntityTransactionElementTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionElementType] = new DefaultEntityTransactionElementTypeFormat {}
  implicit lazy val EntityTransactionElementReversalFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionElementReversal] = new DefaultEntityTransactionElementReversalFormat {}
  implicit lazy val EntityTransationElementReferencedObjTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransationElementReferencedObjType] = new DefaultEntityTransationElementReferencedObjTypeFormat {}
  implicit lazy val EntityTransactionReferenceTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionReferenceType] = new DefaultEntityTransactionReferenceTypeFormat {}
  implicit lazy val EntityTransactionElementDetailTypeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionElementDetailType] = new DefaultEntityTransactionElementDetailTypeFormat {}
  implicit lazy val EntityTransactionElementLinkFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionElementLink] = new DefaultEntityTransactionElementLinkFormat {}
  implicit lazy val EntityTrxElReversalFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TrxElReversal] = new DefaultEntityTrxElReversalFormat {}
  implicit lazy val EntityGetIntTransferLinkageForTaxReqFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxReq] = new DefaultEntityGetIntTransferLinkageForTaxReqFormat {}
  implicit lazy val EntityGetIntTransferLinkageForTaxResFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxRes] = new DefaultEntityGetIntTransferLinkageForTaxResFormat {}
  implicit lazy val EntityInternalTransferForTaxFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.InternalTransferForTax] = new DefaultEntityInternalTransferForTaxFormat {}
  implicit lazy val EntityDealDetailFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealDetail] = new DefaultEntityDealDetailFormat {}
  implicit lazy val EntityDetailAttributeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DetailAttribute] = new DefaultEntityDetailAttributeFormat {}
  implicit lazy val EntityAttributeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Attribute] = new DefaultEntityAttributeFormat {}
  implicit lazy val EntityAttributeValueFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.AttributeValue] = new DefaultEntityAttributeValueFormat {}
  implicit lazy val EntityDetailSubEntityFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DetailSubEntity] = new DefaultEntityDetailSubEntityFormat {}
  implicit lazy val EntityTransationElementReferencedObjFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransationElementReferencedObj] = new DefaultEntityTransationElementReferencedObjFormat {}
  implicit lazy val EntityTransactionReferenceFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionReference] = new DefaultEntityTransactionReferenceFormat {}
  implicit lazy val EntityTransactionDetailFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionDetail] = new DefaultEntityTransactionDetailFormat {}
  implicit lazy val EntityDealContextFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealContext] = new DefaultEntityDealContextFormat {}
  implicit lazy val EntityTransactionFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Transaction] = new DefaultEntityTransactionFormat {}
  implicit lazy val EntityDealReferenceFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealReference] = new DefaultEntityDealReferenceFormat {}
  implicit lazy val EntityDealFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Deal] = new DefaultEntityDealFormat {}
  implicit lazy val EntityDealLinkFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.DealLink] = new DefaultEntityDealLinkFormat {}
  implicit lazy val EntityTransactionElementFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionElement] = new DefaultEntityTransactionElementFormat {}
  implicit lazy val EntityTransactionElementDetailFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.TransactionElementDetail] = new DefaultEntityTransactionElementDetailFormat {}
  implicit lazy val EntityMessageFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Message] = new DefaultEntityMessageFormat {}
  implicit lazy val EntityCurrencyCdFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.CurrencyCd] = new DefaultEntityCurrencyCdFormat {}
  implicit lazy val EntityAmountsFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Amounts] = new DefaultEntityAmountsFormat {}
  implicit lazy val EntityAmountRangeFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.AmountRange] = new DefaultEntityAmountRangeFormat {}
  implicit lazy val EntityCurrencyISOAmountFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.CurrencyISOAmount] = new DefaultEntityCurrencyISOAmountFormat {}
  implicit lazy val EntityAmountFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Amount] = new DefaultEntityAmountFormat {}
  implicit lazy val EntityLangSelWithAllFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.LangSelWithAll] = new DefaultEntityLangSelWithAllFormat {}
  implicit lazy val EntityPeriodFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.Period] = new DefaultEntityPeriodFormat {}
  implicit lazy val EntityPeriodDatesFormat: scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.PeriodDates] = new DefaultEntityPeriodDatesFormat {}

  trait DefaultEntityTransactionTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("Transaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TpCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "StsCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReversalOf")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BookingDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReqDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkToDeal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      org.apache.spark.bts.deal.entity.TransactionType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionReversal](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealReferenceType](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionDetailType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.TpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TpCd"), __scope, false),
        scalaxb.toXML[Short](__obj.StsCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("StsCd"), __scope, false),
        __obj.ReversalOf map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionReversal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReversalOf"), __scope, false) } getOrElse {Nil},
        __obj.BookingDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BookingDate"), __scope, false) } getOrElse {Nil},
        __obj.ReqDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReqDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.apache.spark.bts.deal.entity.DealReferenceType](__obj.LinkToDeal, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkToDeal"), __scope, false),
        __obj.Detail map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionDetailType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityTransactionReversalFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionReversal] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionReversal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionReversal] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReversalTpCd")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.apache.spark.bts.deal.entity.TransactionReversal(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionReversal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.ReversalTpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReversalTpCd"), __scope, false))

  }

  trait DefaultEntityDealReferenceTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealReferenceType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DealReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealReferenceType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "CtgyCd")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.apache.spark.bts.deal.entity.DealReferenceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.CtgyCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("CtgyCd"), __scope, false))

  }

  trait DefaultEntityTransactionDetailTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionDetailType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionDetailType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TrxAttr")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SubEntity")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.TransactionDetailType(p1.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailAttributeType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailSubEntityType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionDetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TrxAttr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailAttributeType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TrxAttr"), __scope, false) },
        __obj.SubEntity flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailSubEntityType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SubEntity"), __scope, false) })

  }

  trait DefaultEntityDetailAttributeTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DetailAttributeType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DetailAttribute")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DetailAttributeType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Role")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Attr")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.DetailAttributeType(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.AttributeType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DetailAttributeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Role, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Role"), __scope, false),
        scalaxb.toXML[org.apache.spark.bts.deal.entity.AttributeType](__obj.Attr, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Attr"), __scope, false))

  }

  trait DefaultEntityAttributeTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.AttributeType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("Attribute")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.AttributeType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Key")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Value")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.AttributeType(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.AttributeValueType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.AttributeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Key, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Key"), __scope, false),
        __obj.Value flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.AttributeValueType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Value"), __scope, false) })

  }

  trait DefaultEntityAttributeValueTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.AttributeValueType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("AttributeValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.AttributeValueType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SeqNo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Ctgy")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BusObjId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BusObjIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TxtVal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "DecVal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "AmtVal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      org.apache.spark.bts.deal.entity.AttributeValueType(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.AttributeValueType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.SeqNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SeqNo"), __scope, false),
        scalaxb.toXML[Short](__obj.Ctgy, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Ctgy"), __scope, false),
        __obj.BusObjId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BusObjId"), __scope, false) } getOrElse {Nil},
        __obj.BusObjIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BusObjIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.TxtVal map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TxtVal"), __scope, false) } getOrElse {Nil},
        __obj.DecVal map { scalaxb.toXML[BigDecimal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("DecVal"), __scope, false) } getOrElse {Nil},
        __obj.AmtVal map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("AmtVal"), __scope, false) } getOrElse {Nil},
        __obj.Date map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityDetailSubEntityTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DetailSubEntityType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DetailSubEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DetailSubEntityType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SubEntId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SubEntIdScCd")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Attr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.apache.spark.bts.deal.entity.DetailSubEntityType(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.AttributeType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DetailSubEntityType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.Name, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Name"), __scope, false),
        scalaxb.toXML[String](__obj.SubEntId, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SubEntId"), __scope, false),
        scalaxb.toXML[Int](__obj.SubEntIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SubEntIdScCd"), __scope, false),
        __obj.Attr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.AttributeType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Attr"), __scope, false) })

  }

  trait DefaultEntityExceptionFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Exception] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("Exception")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Exception] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Cd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Desc")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.Exception(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Exception, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Cd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Cd"), __scope, false),
        scalaxb.toXML[String](__obj.Desc, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Desc"), __scope, false))

  }

  trait DefaultEntityTrxReversalFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TrxReversal] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TrxReversal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TrxReversal] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Cd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonText")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RefId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RefIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "UnstructuredRefId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.TrxReversal(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TrxReversal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Cd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Cd"), __scope, false),
        scalaxb.toXML[String](__obj.ReasonCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonCd"), __scope, false),
        __obj.ReasonText map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonText"), __scope, false) } getOrElse {Nil},
        __obj.RefId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RefId"), __scope, false) } getOrElse {Nil},
        __obj.RefIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RefIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.UnstructuredRefId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("UnstructuredRefId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityHeaderFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Header] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("Header")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Header] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BulkId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ProcModeCd")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.Header(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Header, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.BulkId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BulkId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Short](__obj.ProcModeCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ProcModeCd"), __scope, false))

  }

  trait DefaultEntityTransactionLinkFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionLink] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionLink")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionLink] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkTpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtLinkTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtLinkTpScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RoleScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.TransactionLink(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Short](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionLink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.LinkTpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkTpCd"), __scope, false),
        __obj.ExtLinkTp map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtLinkTp"), __scope, false) } getOrElse {Nil},
        __obj.ExtLinkTpScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtLinkTpScCd"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Short](__obj.RoleScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RoleScCd"), __scope, false))

  }

  trait DefaultEntityDealReversalFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealReversal] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DealReversal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealReversal] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Cd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonText")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RefId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RefIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "UnstructuredRefId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.DealReversal(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealReversal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Cd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Cd"), __scope, false),
        __obj.ReasonCd map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonCd"), __scope, false) } getOrElse {Nil},
        __obj.ReasonText map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonText"), __scope, false) } getOrElse {Nil},
        __obj.RefId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RefId"), __scope, false) } getOrElse {Nil},
        __obj.RefIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RefIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.UnstructuredRefId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("UnstructuredRefId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityAttentionFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Attention] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("Attention")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Attention] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Cd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Desc")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.Attention(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Attention, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Cd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Cd"), __scope, false),
        scalaxb.toXML[String](__obj.Desc, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Desc"), __scope, false))

  }

  trait DefaultEntityDealTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("Deal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "CtgyCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtTp")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtTpScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IsBusTrx")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtSts")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtStsScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Desc")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LegalDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Context")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Link")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.apache.spark.bts.deal.entity.DealType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p8, scalaxb.ElemName(node) :: stack),
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealContextType](p11, scalaxb.ElemName(node) :: stack),
        p12.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealLinkType](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealDetailType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.CtgyCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("CtgyCd"), __scope, false),
        scalaxb.toXML[String](__obj.ExtTp, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtTp"), __scope, false),
        scalaxb.toXML[Int](__obj.ExtTpScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtTpScCd"), __scope, false),
        scalaxb.toXML[Boolean](__obj.IsBusTrx, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IsBusTrx"), __scope, false),
        scalaxb.toXML[String](__obj.ExtSts, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtSts"), __scope, false),
        scalaxb.toXML[Short](__obj.ExtStsScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtStsScCd"), __scope, false),
        __obj.Desc map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Desc"), __scope, false) } getOrElse {Nil},
        __obj.LegalDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LegalDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.apache.spark.bts.deal.entity.DealContextType](__obj.Context, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Context"), __scope, false),
        __obj.Link flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DealLinkType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Link"), __scope, false) },
        __obj.Detail map { scalaxb.toXML[org.apache.spark.bts.deal.entity.DealDetailType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityDealContextTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealContextType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DealContext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealContextType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BusObjCtgyCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BusObjId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BusObjIdScCd")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.apache.spark.bts.deal.entity.DealContextType(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealContextType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.BusObjCtgyCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BusObjCtgyCd"), __scope, false),
        scalaxb.toXML[String](__obj.BusObjId, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BusObjId"), __scope, false),
        scalaxb.toXML[Short](__obj.BusObjIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BusObjIdScCd"), __scope, false))

  }

  trait DefaultEntityDealLinkTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealLinkType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DealLink")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealLinkType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtLinkTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtLinkTpScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RoleScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.DealLinkType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Short](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealLinkType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.LinkTp, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkTp"), __scope, false),
        __obj.ExtLinkTp map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtLinkTp"), __scope, false) } getOrElse {Nil},
        __obj.ExtLinkTpScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtLinkTpScCd"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Short](__obj.RoleScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RoleScCd"), __scope, false))

  }

  trait DefaultEntityDealDetailTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealDetailType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("DealDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealDetailType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "DealAttr")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SubEntity")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.DealDetailType(p1.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailAttributeType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailSubEntityType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealDetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DealAttr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailAttributeType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("DealAttr"), __scope, false) },
        __obj.SubEntity flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailSubEntityType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SubEntity"), __scope, false) })

  }

  trait DefaultEntityTransactionElementTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionElementType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionElementType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReversalOf")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Reference")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BookingSideCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BookingTpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Qty")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "BookingAmt")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TrxPrice")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExecTime")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ValueDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "MarketPrice")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkToTransaction")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 =>
      org.apache.spark.bts.deal.entity.TransactionElementType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionElementReversal](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransationElementReferencedObjType](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionReferenceType](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionElementDetailType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.TpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TpCd"), __scope, false),
        __obj.ReversalOf map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionElementReversal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReversalOf"), __scope, false) } getOrElse {Nil},
        __obj.Reference map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransationElementReferencedObjType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Reference"), __scope, false) } getOrElse {Nil},
        __obj.BookingSideCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BookingSideCd"), __scope, false) } getOrElse {Nil},
        __obj.BookingTpCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BookingTpCd"), __scope, false) } getOrElse {Nil},
        __obj.Qty map { scalaxb.toXML[BigDecimal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Qty"), __scope, false) } getOrElse {Nil},
        __obj.BookingAmt map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("BookingAmt"), __scope, false) } getOrElse {Nil},
        __obj.TrxPrice map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TrxPrice"), __scope, false) } getOrElse {Nil},
        __obj.ExecTime map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExecTime"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.ValueDate, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ValueDate"), __scope, false),
        __obj.MarketPrice map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("MarketPrice"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionReferenceType](__obj.LinkToTransaction, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkToTransaction"), __scope, false),
        __obj.Detail map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionElementDetailType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityTransactionElementReversalFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionElementReversal] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionElementReversal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionElementReversal] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReversalTpCd")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.apache.spark.bts.deal.entity.TransactionElementReversal(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionElementReversal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.ReversalTpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReversalTpCd"), __scope, false))

  }

  trait DefaultEntityTransationElementReferencedObjTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransationElementReferencedObjType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransationElementReferencedObj")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransationElementReferencedObjType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SacNo")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SacNoScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "FinInstrId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "FinInstrIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SecPosId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SecPosIdScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.TransationElementReferencedObjType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransationElementReferencedObjType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SacNo map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SacNo"), __scope, false) } getOrElse {Nil},
        __obj.SacNoScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SacNoScCd"), __scope, false) } getOrElse {Nil},
        __obj.FinInstrId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("FinInstrId"), __scope, false) } getOrElse {Nil},
        __obj.FinInstrIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("FinInstrIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.SecPosId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SecPosId"), __scope, false) } getOrElse {Nil},
        __obj.SecPosIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SecPosIdScCd"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityTransactionReferenceTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionReferenceType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionReferenceType] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.TransactionReferenceType(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionReferenceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false))

  }

  trait DefaultEntityTransactionElementDetailTypeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionElementDetailType] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionElementDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionElementDetailType] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TrxElemAttr")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SubEntity")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.TransactionElementDetailType(p1.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailAttributeType](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailSubEntityType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionElementDetailType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TrxElemAttr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailAttributeType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TrxElemAttr"), __scope, false) },
        __obj.SubEntity flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailSubEntityType](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SubEntity"), __scope, false) })

  }

  trait DefaultEntityTransactionElementLinkFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionElementLink] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TransactionElementLink")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionElementLink] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkTpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtLinkTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ExtLinkTpScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RoleScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.TransactionElementLink(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Short](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionElementLink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.LinkTpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkTpCd"), __scope, false),
        __obj.ExtLinkTp map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtLinkTp"), __scope, false) } getOrElse {Nil},
        __obj.ExtLinkTpScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ExtLinkTpScCd"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Short](__obj.RoleScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RoleScCd"), __scope, false))

  }

  trait DefaultEntityTrxElReversalFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TrxElReversal] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("TrxElReversal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TrxElReversal] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Cd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonText")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RefId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "RefIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "UnstructuredRefId")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.TrxElReversal(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TrxElReversal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Cd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Cd"), __scope, false),
        scalaxb.toXML[String](__obj.ReasonCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonCd"), __scope, false),
        __obj.ReasonText map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonText"), __scope, false) } getOrElse {Nil},
        __obj.RefId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RefId"), __scope, false) } getOrElse {Nil},
        __obj.RefIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("RefIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.UnstructuredRefId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("UnstructuredRefId"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityGetIntTransferLinkageForTaxReqFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxReq] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("GetIntTransferLinkageForTaxReq")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxReq] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "AppId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "CorrelationId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReqTS")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "CifNo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "StartDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "EndDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxReq(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxReq, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.AppId, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("AppId"), __scope, false),
        __obj.CorrelationId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("CorrelationId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ReqTS, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReqTS"), __scope, false),
        scalaxb.toXML[String](__obj.CifNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("CifNo"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.StartDate, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("StartDate"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.EndDate, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("EndDate"), __scope, false))

  }

  trait DefaultEntityGetIntTransferLinkageForTaxResFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxRes] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("GetIntTransferLinkageForTaxRes")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxRes] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "CorrelationId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ResTS")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "CifNo")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "Transfer")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxRes(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.InternalTransferForTax](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.GetIntTransferLinkageForTaxRes, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CorrelationId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("CorrelationId"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.ResTS, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ResTS"), __scope, false),
        scalaxb.toXML[String](__obj.CifNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("CifNo"), __scope, false),
        __obj.Transfer flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.InternalTransferForTax](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("Transfer"), __scope, false) })

  }

  trait DefaultEntityInternalTransferForTaxFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.InternalTransferForTax] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v1")
    
    override def typeName: Option[String] = Some("InternalTransferForTax")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.InternalTransferForTax] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SkaNo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TrxId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "TypeCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkedCifNo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkedSkaNo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "LinkedTrxId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "IsCBO")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "ReasonCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), "SettlementDate")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      org.apache.spark.bts.deal.entity.InternalTransferForTax(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        p7.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.InternalTransferForTax, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.SkaNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SkaNo"), __scope, false),
        scalaxb.toXML[String](__obj.TrxId, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TrxId"), __scope, false),
        scalaxb.toXML[Short](__obj.TypeCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("TypeCd"), __scope, false),
        scalaxb.toXML[String](__obj.LinkedCifNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkedCifNo"), __scope, false),
        scalaxb.toXML[String](__obj.LinkedSkaNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkedSkaNo"), __scope, false),
        scalaxb.toXML[String](__obj.LinkedTrxId, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("LinkedTrxId"), __scope, false),
        __obj.IsCBO map { scalaxb.toXML[Boolean](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("IsCBO"), __scope, false) } getOrElse {Nil},
        __obj.ReasonCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("ReasonCd"), __scope, false) } getOrElse {Nil},
        __obj.SettlementDate map { scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v1"), Some("SettlementDate"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityDealDetailFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealDetail] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("DealDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "DealAttr")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SubEntity")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.DealDetail(p1.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailAttribute](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailSubEntity](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.DealAttr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailAttribute](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("DealAttr"), __scope, false) },
        __obj.SubEntity flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailSubEntity](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SubEntity"), __scope, false) })

  }

  trait DefaultEntityDetailAttributeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DetailAttribute] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("DetailAttribute")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DetailAttribute] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Role")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Attr")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.DetailAttribute(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.Attribute](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DetailAttribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Role, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Role"), __scope, false),
        scalaxb.toXML[org.apache.spark.bts.deal.entity.Attribute](__obj.Attr, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Attr"), __scope, false))

  }

  trait DefaultEntityAttributeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Attribute] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("Attribute")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Attribute] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Key")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Value")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.Attribute(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.AttributeValue](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Attribute, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.Key, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Key"), __scope, false),
        __obj.Value flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.AttributeValue](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Value"), __scope, false) })

  }

  trait DefaultEntityAttributeValueFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.AttributeValue] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("AttributeValue")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.AttributeValue] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SeqNo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Ctgy")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BusObjId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BusObjIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TxtVal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "DecVal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "AmtVal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Date")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      org.apache.spark.bts.deal.entity.AttributeValue(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.AttributeValue, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.SeqNo, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SeqNo"), __scope, false),
        scalaxb.toXML[Short](__obj.Ctgy, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Ctgy"), __scope, false),
        __obj.BusObjId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BusObjId"), __scope, false) } getOrElse {Nil},
        __obj.BusObjIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BusObjIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.TxtVal map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TxtVal"), __scope, false) } getOrElse {Nil},
        __obj.DecVal map { scalaxb.toXML[BigDecimal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("DecVal"), __scope, false) } getOrElse {Nil},
        __obj.AmtVal map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("AmtVal"), __scope, false) } getOrElse {Nil},
        __obj.Date map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Date"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityDetailSubEntityFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DetailSubEntity] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("DetailSubEntity")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DetailSubEntity] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Name")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SubEntId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SubEntIdScCd")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Attr")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.apache.spark.bts.deal.entity.DetailSubEntity(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p3, scalaxb.ElemName(node) :: stack),
        p4.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Attribute](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DetailSubEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.Name, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Name"), __scope, false),
        scalaxb.toXML[String](__obj.SubEntId, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SubEntId"), __scope, false),
        scalaxb.toXML[Int](__obj.SubEntIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SubEntIdScCd"), __scope, false),
        __obj.Attr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.Attribute](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Attr"), __scope, false) })

  }

  trait DefaultEntityTransationElementReferencedObjFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransationElementReferencedObj] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("TransationElementReferencedObj")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransationElementReferencedObj] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SacNo")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SacNoScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "FinInstrId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "FinInstrIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SecPosId")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SecPosIdScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.TransationElementReferencedObj(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransationElementReferencedObj, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SacNo map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SacNo"), __scope, false) } getOrElse {Nil},
        __obj.SacNoScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SacNoScCd"), __scope, false) } getOrElse {Nil},
        __obj.FinInstrId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("FinInstrId"), __scope, false) } getOrElse {Nil},
        __obj.FinInstrIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("FinInstrIdScCd"), __scope, false) } getOrElse {Nil},
        __obj.SecPosId map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SecPosId"), __scope, false) } getOrElse {Nil},
        __obj.SecPosIdScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SecPosIdScCd"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityTransactionReferenceFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionReference] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("TransactionReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionReference] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IdScCd")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.TransactionReference(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IdScCd"), __scope, false))

  }

  trait DefaultEntityTransactionDetailFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionDetail] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("TransactionDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TrxAttr")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SubEntity")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.TransactionDetail(p1.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailAttribute](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailSubEntity](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TrxAttr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailAttribute](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TrxAttr"), __scope, false) },
        __obj.SubEntity flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailSubEntity](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SubEntity"), __scope, false) })

  }

  trait DefaultEntityDealContextFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealContext] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("DealContext")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealContext] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BusObjCtgyCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BusObjId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BusObjIdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BankUnitId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BankUnitIdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BankRelId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BankRelIdScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.apache.spark.bts.deal.entity.DealContext(scalaxb.fromXML[Short](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p7, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealContext, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Short](__obj.BusObjCtgyCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BusObjCtgyCd"), __scope, false),
        scalaxb.toXML[String](__obj.BusObjId, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BusObjId"), __scope, false),
        scalaxb.toXML[Short](__obj.BusObjIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BusObjIdScCd"), __scope, false),
        scalaxb.toXML[String](__obj.BankUnitId, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BankUnitId"), __scope, false),
        scalaxb.toXML[Short](__obj.BankUnitIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BankUnitIdScCd"), __scope, false),
        scalaxb.toXML[String](__obj.BankRelId, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BankRelId"), __scope, false),
        scalaxb.toXML[Short](__obj.BankRelIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BankRelIdScCd"), __scope, false))

  }

  trait DefaultEntityTransactionFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Transaction] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("Transaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Transaction] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Header")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TpCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "StsCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TradeDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ValueDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SettlDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "DealLink")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TrxLink")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Reversal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 =>
      org.apache.spark.bts.deal.entity.Transaction(scalaxb.fromXML[org.apache.spark.bts.deal.entity.Header](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealReference](p10, scalaxb.ElemName(node) :: stack),
        p11.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionLink](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TrxReversal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Transaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.apache.spark.bts.deal.entity.Header](__obj.Header, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Header"), __scope, false),
        scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.TpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TpCd"), __scope, false),
        scalaxb.toXML[Short](__obj.StsCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("StsCd"), __scope, false),
        __obj.TradeDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TradeDate"), __scope, false) } getOrElse {Nil},
        __obj.ValueDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ValueDate"), __scope, false) } getOrElse {Nil},
        __obj.BookingDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingDate"), __scope, false) } getOrElse {Nil},
        __obj.SettlDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SettlDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.apache.spark.bts.deal.entity.DealReference](__obj.DealLink, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("DealLink"), __scope, false),
        __obj.TrxLink flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionLink](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TrxLink"), __scope, false) },
        __obj.Reversal map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TrxReversal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Reversal"), __scope, false) } getOrElse {Nil},
        __obj.Detail map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionDetail](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityDealReferenceFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealReference] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("DealReference")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealReference] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IdScCd")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.DealReference(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IdScCd"), __scope, false))

  }

  trait DefaultEntityDealFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Deal] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("Deal")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Deal] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Header")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "CtgyCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BtsTpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtTpScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtTpDesc")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IsBusTrx")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BusTrxTpCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BtsStsCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtSts")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtStsScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Desc")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "OrderDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "CreatedAt")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Context")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "DealLink")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IsCBO")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ReasonCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Reversal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      org.apache.spark.bts.deal.entity.Deal(scalaxb.fromXML[org.apache.spark.bts.deal.entity.Header](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p5, scalaxb.ElemName(node) :: stack),
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p9, scalaxb.ElemName(node) :: stack),
        p10.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Short](p11, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p12, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p13, scalaxb.ElemName(node) :: stack),
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p16, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealContext](p17, scalaxb.ElemName(node) :: stack),
        p18.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealLink](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealReversal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DealDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Deal, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.apache.spark.bts.deal.entity.Header](__obj.Header, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Header"), __scope, false),
        scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.CtgyCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("CtgyCd"), __scope, false),
        scalaxb.toXML[Short](__obj.BtsTpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BtsTpCd"), __scope, false),
        __obj.ExtTp map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtTp"), __scope, false) } getOrElse {Nil},
        __obj.ExtTpScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtTpScCd"), __scope, false) } getOrElse {Nil},
        __obj.ExtTpDesc map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtTpDesc"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.IsBusTrx, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IsBusTrx"), __scope, false),
        __obj.BusTrxTpCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BusTrxTpCd"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Short](__obj.BtsStsCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BtsStsCd"), __scope, false),
        scalaxb.toXML[String](__obj.ExtSts, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtSts"), __scope, false),
        scalaxb.toXML[Short](__obj.ExtStsScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtStsScCd"), __scope, false),
        __obj.Desc map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Desc"), __scope, false) } getOrElse {Nil},
        __obj.OrderDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("OrderDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.CreatedAt, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("CreatedAt"), __scope, false),
        scalaxb.toXML[org.apache.spark.bts.deal.entity.DealContext](__obj.Context, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Context"), __scope, false),
        __obj.DealLink flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DealLink](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("DealLink"), __scope, false) },
        __obj.IsCBO map { scalaxb.toXML[Boolean](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IsCBO"), __scope, false) } getOrElse {Nil},
        __obj.ReasonCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ReasonCd"), __scope, false) } getOrElse {Nil},
        __obj.Reversal map { scalaxb.toXML[org.apache.spark.bts.deal.entity.DealReversal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Reversal"), __scope, false) } getOrElse {Nil},
        __obj.Detail map { scalaxb.toXML[org.apache.spark.bts.deal.entity.DealDetail](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityDealLinkFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.DealLink] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("DealLink")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.DealLink] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "LinkTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtLinkTp")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ExtLinkTpScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "RoleScCd")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.apache.spark.bts.deal.entity.DealLink(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Short](p6, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.DealLink, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.LinkTp, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("LinkTp"), __scope, false),
        __obj.ExtLinkTp map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtLinkTp"), __scope, false) } getOrElse {Nil},
        __obj.ExtLinkTpScCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ExtLinkTpScCd"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Short](__obj.RoleScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("RoleScCd"), __scope, false))

  }

  trait DefaultEntityTransactionElementFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionElement] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("TransactionElement")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionElement] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Header")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Id")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "IdScCd")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Reference")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingSideCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingTpCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Qty")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "QtyUnitCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingAmt")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TrxPrice")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TradeDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "ValueDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingDate")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SettlDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingId")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "BookingIdScCd")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "MarketPrice")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TrxLink")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TrxElLink")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Reversal")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "Detail")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      org.apache.spark.bts.deal.entity.TransactionElement(scalaxb.fromXML[org.apache.spark.bts.deal.entity.Header](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p4, scalaxb.ElemName(node) :: stack),
        p5.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransationElementReferencedObj](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[Short](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p12, scalaxb.ElemName(node) :: stack),
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p14, scalaxb.ElemName(node) :: stack),
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String](p16, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Short](p17, scalaxb.ElemName(node) :: stack),
        p18.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.Amount](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionReference](p19, scalaxb.ElemName(node) :: stack),
        p20.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionElementLink](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TrxElReversal](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.TransactionElementDetail](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionElement, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.apache.spark.bts.deal.entity.Header](__obj.Header, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Header"), __scope, false),
        scalaxb.toXML[String](__obj.Id, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Id"), __scope, false),
        scalaxb.toXML[Short](__obj.IdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("IdScCd"), __scope, false),
        scalaxb.toXML[Short](__obj.TpCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TpCd"), __scope, false),
        __obj.Reference map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransationElementReferencedObj](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Reference"), __scope, false) } getOrElse {Nil},
        __obj.BookingSideCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingSideCd"), __scope, false) } getOrElse {Nil},
        __obj.BookingTpCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingTpCd"), __scope, false) } getOrElse {Nil},
        __obj.Qty map { scalaxb.toXML[BigDecimal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Qty"), __scope, false) } getOrElse {Nil},
        __obj.QtyUnitCd map { scalaxb.toXML[Short](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("QtyUnitCd"), __scope, false) } getOrElse {Nil},
        __obj.BookingAmt map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingAmt"), __scope, false) } getOrElse {Nil},
        __obj.TrxPrice map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TrxPrice"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.TradeDate, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TradeDate"), __scope, false),
        __obj.ValueDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("ValueDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.BookingDate, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingDate"), __scope, false),
        __obj.SettlDate map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SettlDate"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[String](__obj.BookingId, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingId"), __scope, false),
        scalaxb.toXML[Short](__obj.BookingIdScCd, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("BookingIdScCd"), __scope, false),
        __obj.MarketPrice map { scalaxb.toXML[org.apache.spark.bts.deal.entity.Amount](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("MarketPrice"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionReference](__obj.TrxLink, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TrxLink"), __scope, false),
        __obj.TrxElLink flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionElementLink](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TrxElLink"), __scope, false) },
        __obj.Reversal map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TrxElReversal](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Reversal"), __scope, false) } getOrElse {Nil},
        __obj.Detail map { scalaxb.toXML[org.apache.spark.bts.deal.entity.TransactionElementDetail](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("Detail"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityTransactionElementDetailFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.TransactionElementDetail] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/ifg001908_bts/v2")
    
    override def typeName: Option[String] = Some("TransactionElementDetail")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.TransactionElementDetail] =
      phrase(safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "TrxElemAttr")) ~ 
      safeRep(scalaxb.ElemName(Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), "SubEntity")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.TransactionElementDetail(p1.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailAttribute](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[org.apache.spark.bts.deal.entity.DetailSubEntity](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.TransactionElementDetail, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.TrxElemAttr flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailAttribute](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("TrxElemAttr"), __scope, false) },
        __obj.SubEntity flatMap { scalaxb.toXML[org.apache.spark.bts.deal.entity.DetailSubEntity](_, Some("http://schemas.cs.csg.com/ifg001908_bts/v2"), Some("SubEntity"), __scope, false) })

  }

  trait DefaultEntityMessageFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Message] {
    val targetNamespace: Option[String] = Some("http://services.cs.csg.com/IFG001908_BTS/receiveBTDeal_2_0")
    
    override def typeName: Option[String] = Some("message")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Message] =
      phrase((scalaxb.ElemName(Some("http://services.cs.csg.com/IFG001908_BTS/receiveBTDeal_2_0"), "Deal")) ^^
      { case p1 =>
      org.apache.spark.bts.deal.entity.Message(scalaxb.fromXML[org.apache.spark.bts.deal.entity.Deal](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Message, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[org.apache.spark.bts.deal.entity.Deal](__obj.Deal, Some("http://services.cs.csg.com/IFG001908_BTS/receiveBTDeal_2_0"), Some("Deal"), __scope, false))

  }

  trait DefaultEntityCurrencyCdFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.CurrencyCd] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1")
    
    override def typeName: Option[String] = Some("CurrencyCd")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.CurrencyCd] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "CurrencyCdCs")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "CurrencyCdIso")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.CurrencyCd(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.CurrencyCd, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CurrencyCdCs map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("CurrencyCdCs"), __scope, false) } getOrElse {Nil},
        __obj.CurrencyCdIso map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("CurrencyCdIso"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEntityAmountsFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Amounts] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1")
    
    override def typeName: Option[String] = Some("Amounts")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Amounts] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "CurencyISO")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "Amount")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.Amounts(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Amounts, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CurencyISO, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("CurencyISO"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.Amount, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("Amount"), __scope, false))

  }

  trait DefaultEntityAmountRangeFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.AmountRange] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1")
    
    override def typeName: Option[String] = Some("AmountRange")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.AmountRange] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "AmountFrom")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "AmountTo")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "Currency")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.apache.spark.bts.deal.entity.AmountRange(scalaxb.fromXML[BigDecimal](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.AmountRange, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[BigDecimal](__obj.AmountFrom, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("AmountFrom"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.AmountTo, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("AmountTo"), __scope, false),
        scalaxb.toXML[String](__obj.Currency, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("Currency"), __scope, false))

  }

  trait DefaultEntityCurrencyISOAmountFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.CurrencyISOAmount] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1")
    
    override def typeName: Option[String] = Some("CurrencyISOAmount")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.CurrencyISOAmount] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "CurrencyISO")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "Amount")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.CurrencyISOAmount(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[BigDecimal](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.CurrencyISOAmount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.CurrencyISO, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("CurrencyISO"), __scope, false),
        scalaxb.toXML[BigDecimal](__obj.Amount, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("Amount"), __scope, false))

  }

  trait DefaultEntityAmountFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Amount] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1")
    
    override def typeName: Option[String] = Some("Amount")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Amount] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "CurrencyCS")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "CurencyISO")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), "Amount")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.apache.spark.bts.deal.entity.Amount(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[BigDecimal](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Amount, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.CurrencyCS map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("CurrencyCS"), __scope, false) } getOrElse {Nil},
        __obj.CurencyISO map { scalaxb.toXML[String](_, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("CurencyISO"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[BigDecimal](__obj.Amount, Some("http://schemas.cs.csg.com/pb/bas/gedd/de/v1"), Some("Amount"), __scope, false))

  }

  def buildEntityLangSelWithAllFormat = new DefaultEntityLangSelWithAllFormat {}
  trait DefaultEntityLangSelWithAllFormat extends scalaxb.XMLFormat[org.apache.spark.bts.deal.entity.LangSelWithAll] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/il/v1")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.apache.spark.bts.deal.entity.LangSelWithAll] = seq match {
      case elem: scala.xml.Elem => Right(org.apache.spark.bts.deal.entity.LangSelWithAll.fromString(elem.text, elem.scope))
      case _ => Right(org.apache.spark.bts.deal.entity.LangSelWithAll.fromString(seq.text, scala.xml.TopScope))
    }
    
    def writes(__obj: org.apache.spark.bts.deal.entity.LangSelWithAll, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, true, scala.xml.Text(__obj.toString))
  }

  trait DefaultEntityPeriodFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.Period] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1")
    
    override def typeName: Option[String] = Some("Period")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.Period] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), "ValidFrom")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), "ValidTo")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.Period(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.Period, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.ValidFrom, Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), Some("ValidFrom"), __scope, false),
        scalaxb.toXML[String](__obj.ValidTo, Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), Some("ValidTo"), __scope, false))

  }

  trait DefaultEntityPeriodDatesFormat extends scalaxb.ElemNameParser[org.apache.spark.bts.deal.entity.PeriodDates] {
    val targetNamespace: Option[String] = Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1")
    
    override def typeName: Option[String] = Some("PeriodDates")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.apache.spark.bts.deal.entity.PeriodDates] =
      phrase((scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), "PeriodFromDate")) ~ 
      (scalaxb.ElemName(Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), "PeriodToDate")) ^^
      { case p1 ~ p2 =>
      org.apache.spark.bts.deal.entity.PeriodDates(scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.apache.spark.bts.deal.entity.PeriodDates, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.PeriodFromDate, Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), Some("PeriodFromDate"), __scope, false),
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.PeriodToDate, Some("http://schemas.cs.csg.com/pb/bas/gedd/ti/v1"), Some("PeriodToDate"), __scope, false))

  }


}

